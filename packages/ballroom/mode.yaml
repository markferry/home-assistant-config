#
# Mode selection
#
# Stores last user intent.
# Reverts to manual when user adjustments are made.
#

input_select:
  ballroom_mode:
    name: Mode
    options:
      - 'Off'
      - 'Party'
      - 'Movie'
      - 'Bright'
      - 'Manual'
    initial: 'Off'
    icon: mdi:projector

input_number:
  ballroom_temperature_off:
    name: 'Off Temp'
    icon: mdi:thermostat
    unit_of_measurement: "\xB0C"
    min: 5
    max: 25
    initial: 5
    step: 1

  ballroom_temperature_party:
    name: 'Party Temp'
    icon: mdi:thermostat
    unit_of_measurement: "\xB0C"
    min: 5
    max: 25
    initial: 20
    step: 1

  ballroom_temperature_movie:
    name: 'Movie Temp'
    icon: mdi:thermostat
    unit_of_measurement: "\xB0C"
    min: 5
    max: 25
    initial: 20
    step: 1

  ballroom_temperature_bright:
    name: 'Bright Temp'
    icon: mdi:thermostat
    unit_of_measurement: "\xB0C"
    min: 5
    max: 25
    initial: 20
    step: 1

script:
  set_mode:
    sequence:
      - service: automation.turn_off
        data_template:
          entity_id: 'automation.{{room}}_revert_to_manual'
      - service: scene.turn_on
        data_template:
          entity_id: 'scene.{{room}}_{{mode}}'
      - service: climate.set_temperature
        data_template:
          entity_id: 'climate.{{room}}_thermostat'
          temperature: "{{ states('input_number.'+room+'_temperature_'+mode) }}"
      - service: automation.turn_on
        data_template:
          entity_id: 'automation.{{room}}_revert_to_manual'

automation:
  - alias: ballroom_revert_to_manual
    trigger:
      - platform: state
        entity_id:
          - group.ballroom_lights
          - group.ballroom_party_lights
          - climate.ballroom_thermostat
    action:
        - service: input_select.select_option
          data:
            entity_id: input_select.ballroom_mode
            option: 'Manual'

##   - alias: ballroom_sun_lights
##     trigger:
##       - platform: state
##         entity_id: sun.sun
##     action:
##       - service: scene.turn_on  # FIXME
##         data_template:
##           entity_id: >
##             {% if is_state(trigger.entity_id, "Off") %}
##               scene.ballroom_off
##             {%-elif is_state(trigger.entity_id, "Party") %}
##               automation.ballroom_party
##             {%-elif is_state(trigger.entity_id, "Movie") %}
##               automation.ballroom_movie
##             {%-elif is_state(trigger.entity_id, "Bright") %}
##               automation.ballroom_bright
##             {% else %}
##               None
##             {% endif %}
## 
##   - alias: ballroom_mode_off
##     trigger:
##       platform: state
##       entity_id: input_select.ballroom_mode
##       to: 'Off'
##     action:
##     - service: scene.turn_on
##       entity_id: scene.ballroom_off
## 
##   - alias: ballroom_mode_party
##     trigger:
##       - platform: state
##         entity_id: input_select.ballroom_mode
##         to: 'Party'
##     action:
##       - service: automation.turn_off
##         entity_id: automation.ballroom_revert_to_manual
##       - service: scene.turn_on
##         entity_id: scene.ballroom_party
##       - service: climate.set_temperature
##         data_template:
##           entity_id: climate.ballroom_thermostat
##           temperature: '{{ states.input_number.ballroom_temperature_party.state }}'
##       - service: automation.turn_on
##         entity_id: automation.ballroom_revert_to_manual
## 
##   - alias: ballroom_mode_movie
##     trigger:
##       - platform: state
##         entity_id: input_select.ballroom_mode
##         to: 'Movie'
##     action:
##       - service: script.set_mode
##         data:
##           room: 'ballroom'
##           mode: 'movie'

  - alias: ballroom_mode
    trigger:
      - platform: state
        entity_id: input_select.ballroom_mode
    action:
      - service: script.set_mode
        data_template:
          room: 'ballroom'
          mode: '{{ trigger.to_state.state | lower }}'

