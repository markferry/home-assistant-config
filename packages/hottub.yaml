# Hot Tub UI entity (read-only)
#
# Triggered by automation.hottub_started
# and automation.hottub_stopped
#
binary_sensor:
- name: hottub
  platform: mqtt
  state_topic: ha/event/hottub
  payload_on: 'on'
  payload_off: 'off'

input_boolean:
  hottub_debouncer:
    name: "Hot Tub Debouncer"
    initial: off

homeassistant:
  customize:
    # friendly_name needed for floorplan
    binary_sensor.hottub:
      friendly_name: Hot Tub Heating
      icon: mdi:hot-tub
    switch.hottub_powernode_switch:
      friendly_name: Hot Tub Power Supply
      icon: mdi:power-plug
    sensor.hottub_powernode_electric_kwh_value:
      friendly_name: Hot Tub Energy
    sensor.hottub_powernode_electric_w_value:
      friendly_name: Hot Tub Power

google_assistant:
  entity_config:
    switch.hottub_powernode_switch:
      name: "Hot Tub Power"
      expose: true
      room: "Outside"

group:
  g_hottub:
    name: Hot Tub
    icon: mdi:pot
    entities:
    - binary_sensor.hottub
    - switch.hottub_powernode_switch
    - sensor.hottub_powernode_electric_kwh_value
    - sensor.hottub_powernode_electric_w_value

# Power detection for the hot tub
# Debounce numeric_state with an input_boolean.
#
# Hot tub heater load is ~2000W
# Filter only load is ~30W
#
automation:
- alias: 'Hot Tub Hi'
  trigger:
    platform: numeric_state
    entity_id: sensor.hottub_powernode_electric_w_value
    above: 1500
  action:
    service: input_boolean.turn_on
    entity_id: input_boolean.hottub_debouncer

- alias: 'Hot Tub Lo'
  trigger:
    platform: numeric_state
    entity_id: sensor.hottub_powernode_electric_w_value
    below: 200
  action:
    service: input_boolean.turn_off
    entity_id: input_boolean.hottub_debouncer

- alias: 'Hot Tub Started'
  trigger:
    platform: state
    entity_id: input_boolean.hottub_debouncer
    to: 'on'
    for:
      minutes: 10
  condition:
    - condition: state
      entity_id: binary_sensor.hottub
      state:
        - 'off'
        - 'unknown'
  action:
    # turn on binary_sensor.hottub
    - service: mqtt.publish
      data_template:
        topic: 'ha/event/hottub'
        payload: 'on'
    - service: notify.automations
      data_template:
        message: 'Hot Tub heating started'


- alias: 'Hot Tub Stopped'
  trigger:
    platform: state
    entity_id: input_boolean.hottub_debouncer
    to: 'off'
    for:
      minutes: 5
  condition:
    - condition: state
      entity_id: binary_sensor.hottub
      state:
        - 'on'
        - 'unknown'
  action:
    # turn off binary_sensor.hottub
    - service: mqtt.publish
      data_template:
        topic: 'ha/event/hottub'
        payload: 'off'
    - service: notify.whalebarn
      data_template:
        message: 'Hot Tub heating finished'
    - service: persistent_notification.create
      data:
        title: 'Hot Tub'
        message: 'Heating stopped {{ as_timestamp(now()) | timestamp_custom("at %R on %a %d %b") }}'
        notification_id: 'hottub'
